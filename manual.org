#+TITLE: mlorg's reference manual
#+AUTHOR: Simon Castellan
#+EMAIL: simon.castellan@iuwt.fr
#+begin_abstract
=mlorg= is a parser written in OCaml for =org-mode= files. It focuses on letting
the user interact with the user by means of OCaml source code
#+end_abstract
Last updated: <2012-07-29 dim.>
#+begin_tableofcontents
Table of contents:
#+end_tableofcontents


* Downloading, compiling and installing mlorg.

** Git repository
The source code of mlorg is available on [[http://gitorious.org/mlorg/mlorg][gitorious]]. There is no official release
of =mlorg= yet and there is a /revision/ each week (last revision: r1, as of
<2012-07-29 dim.>).
** Compiling =mlorg= and installing.
=mlorg= uses =oasis= to build. The default workflow to compile =mlorg= is thus:

: ocaml setup.ml -configure
: ocaml setup.ml -build

Note that you will need a very recent version of batteries to compile it. To
install it (having a version installed is needed to dynamically load modules), type

: ocaml setup.ml -install

The =Makefile= provides aliases for this two commands. See the documentationof
oasis to customize the build process.
* =mlorg=, the binary, as a user
You may be interested  in =mlorg= for a few reasons:
- You want to write and publish documents using org-mode.
- You want to access information that are in your org-mode files and you don't
  want to do it in ELisp.

Then =mlorg= is perfect for the task. You should check out the [[file:syntax.org][syntax]] reference
recognized by =mlorg=.

** =mlorg= invocation
The typical invocation of =mlorg= is as follows:

: mlorg --filename <filename> --backend <backend>

=mlorg= will parse =filename= and exports it to a seperate file according to
=backend=. The backend will compute the filename to use to write the output in,
based on the filename (often it is only an extension change). You can override
this setting by issuying =--output <output>=.

=mlorg= recognize the following options:
- =--filename <filename>= The path to the input file (Default: stdin)
- =--output <filename>= The path to the output file (Default: computed from the input file)
- =--possible-options= Prints out the list of configuration options of mlorg (See [[Configuration options]])
- =--set option=value= Sets the option =option= to =value=
- =--backend <backend>= Sets the backend to =backend= (Default: html)
** Configuration options
=mlorg= relies on plugins that can be customized using configuration
items. There is two way to set a configuration parameter:
- in the file, by using a directive:
  : #+key: value
- in the commandline, with the =--set= switch.

See the documentation of plugins to see a list of options expected by them.
** Plugins
Plugins are modules that work on the abstract representation of the input file
(the AST of the file). There is several kinds of plugins

- backends (or /exporters/) that exports the document to a specific format
- module that maps the AST (for instance there is a plugin that computes the
  table of contents of a document)

Each plugins exports a list of configuration item that can be changed to
customize it. The list of configurations item:

- =mlorg.verbose= [type: =integer=] (default: =0=) -- Verbosity level
- =general.math2png.dir= [type: =any string=] (default: =lxtpng=) -- The directory where to store images of preprocessed formulas
- =general.math2png.latex= [type: =any string=] (default: =latex -interaction\=batchmode=) -- The latex command to invoke
- =general.math2png.dvipng= [type: =any string=] (default: =dvipng=) -- The dvipng command to invoke
- =general.math2png.header= [type: =any string=] (default: ) -- Header to add to the tex files
- =general.math2png.inline= [type: =boolean (true, yes, no, false)=] (default: =no=) -- Tell whether inline math should be processed
- =general.math2png.inline= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Tell whether block math (between $$) should be processed
- =general.toc.number-heading= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- True if headings should be numbered
- =general.toc.number-format= [type: =any string=] (default: =1.1.1.1.1=) -- The format used to number the headings
- =general.toc.number-toc= [type: =boolean (true, yes, no, false)=] (default: =no=) -- True if there should be numbers in the table of contents
- =exporters.html.encoding= [type: =any string=] (default: =utf-8=) -- The document's encoding
- =exporters.html.wrap= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Shall the output be a full html document ?
- =exporters.html.style= [type: =any string=] (default: =style.css=) -- The stylesheet to use
- =exporters.html.use-math2png= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Convert latex formulas to PNG using Math2png extension
- =exporters.html.image-extensions= [type: =List of any string=] (default: =[.png, .jpg, .jpeg, .gif, .bmp]=) -- The list of extensions to be considered as images
- =exporters.latex.classname= [type: =any string=] (default: =article=) -- The LaTeX class name to use
=exporters.latex.header= [type: =any string=] -- The LaTeX header. You can use the following variables in it:
- classname: the class name chosen for this document
- packages: the list of packages to be loaded (formatted)
- extraheader: user's extra header
- title, author: document's metadata. Default value:
  :\documentclass{$classname}
  :$packages
  :$extraheader
  :\title{$title}
  :\author{$author}
  :\begin{document}
  :\maketitle
  :
- =exporters.latex.footer= [type: =any string=] (default: =\end{document}=) -- The LaTeX footer
- =exporters.latex.extraheader= [type: =any string=] (default: ) -- Extra LaTeX header
- =exporters.latex.sections= [type: =List of any string=] (default: =[section, subsection, subsubsection, paragraph, subparagraph]=) -- The name of the sections
- =general.dynamic.ocamlc= [type: =any string=] (default: =ocamlfind ocamlc -c -package batteries,mlorg=) -- ocamlc command to use
- =general.dynamic.ocamlopt= [type: =any string=] (default: =ocamlfind ocamlopt -shared -package batteries,mlorg=) -- ocamlopt command to use
- =exporters.quote.block= [type: =any string=] (default: =export=) -- Name of the codeblock to use to export
- =exporters.quote.external-file= [type: =any string=] (default: ) -- Optional name of the file to load
- =exporters.quote.code= [type: =any string=] (default: ) -- Optional code (as a string) to load
- =exporters.quote.save= [type: =any string=] (default: ) -- Non-empty: set to a ML file in which the generated source will be put (instead of a temporary file

 Here is a list of plugins.
*** Exporters
Those plugins are meant to output a document to a specific format. The format of
a configuration name for those module is =exporters.<plugin>.<name>=.
**** Html
The default backend. It exports the file to HTML. It can be used to generate
full pages or only fragment of pages and can be configured to use [[math2png]], the
plugin to deal with converting math formulas to image files. Options known by the html backend:

- =encoding= (=string=) : The document's encoding (default: =utf-8). 



