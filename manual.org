#+TITLE: mlorg's reference manual
#+AUTHOR: Simon Castellan
#+EMAIL: simon.castellan@iuwt.fr
#+begin_abstract
=mlorg= is a parser written in OCaml for =org-mode= files. It focuses on letting
the user interact with the user by means of OCaml source code
#+end_abstract
Last updated: <2012-08-08 mer.>
#+begin_tableofcontents
Table of contents:
#+end_tableofcontents


* Downloading, compiling and installing mlorg.

** Git repository
The source code of mlorg is available on [[http://gitorious.org/mlorg/mlorg][gitorious]]. There is no official release
of =mlorg= yet and there is a /revision/ each week (last revision: r1, as of
<2012-07-29 dim.>).
** Compiling =mlorg= and installing.
=mlorg= uses =oasis= to build. The default workflow to compile =mlorg= is thus:

: ocaml setup.ml -configure
: ocaml setup.ml -build

Note that you will need a very recent version of batteries to compile it. To
install it (having a version installed is needed to dynamically load modules), type

: ocaml setup.ml -install

The =Makefile= provides aliases for this two commands. See the documentationof
oasis to customize the build process.
* =mlorg=, the binary, as a user
You may be interested  in =mlorg= for a few reasons:
- You want to write and publish documents using org-mode.
- You want to access information that are in your org-mode files and you don't
  want to do it in ELisp.

Then =mlorg= is perfect for the task. 

** =mlorg= invocation
The typical invocation of =mlorg= is as follows:

: mlorg --filename <filename> --backend <backend>

=mlorg= will parse =filename= and exports it to a seperate file according to
=backend=. The backend will compute the filename to use to write the output in,
based on the filename (often it is only an extension change). You can override
this setting by issuying =--output <output>=.

=mlorg= recognize the following options:
- =--filename <filename>= The path to the input file (Default: stdin)
- =--output <filename>= The path to the output file (Default: computed from the input file)
- =--possible-options= Prints out the list of configuration options of mlorg (See [[Configuration options]])
- =--set option=value= Sets the option =option= to =value=
- =--backend <backend>= Sets the backend to =backend= (Default: html)
** Configuration options
=mlorg= relies on plugins that can be customized using configuration
items. There is two way to set a configuration parameter:
- in the file, by using a directive:
  : #+key: value
- in the commandline, with the =--set= switch.

See the documentation of plugins to see a list of options expected by them.
** Plugins
Plugins are modules that work on the abstract representation of the input file
(the AST of the file). There is several kinds of plugins

- backends (or /exporters/) that exports the document to a specific format
- module that maps the AST (for instance there is a plugin that computes the
  table of contents of a document)

Each plugins exports a list of configuration item that can be changed to
customize it. The list of configurations item:

- =mlorg.verbose= [type: =integer=] (default: =0=) -- Verbosity level
- =general.math2png.dir= [type: =any string=] (default: ="lxtpng"=) -- The directory where to store images of preprocessed formulas
- =general.math2png.latex= [type: =any string=] (default: ="latex -interaction\=batchmode"=) -- The latex command to invoke
- =general.math2png.dvipng= [type: =any string=] (default: ="dvipng"=) -- The dvipng command to invoke
- =general.math2png.header= [type: =any string=] (default: =""=) -- Header to add to the tex files
- =general.math2png.inline= [type: =boolean (true, yes, no, false)=] (default: =no=) -- Tell whether inline math should be processed
- =general.math2png.inline= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Tell whether block math (between $$) should be processed
- =general.toc.number-heading= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- True if headings should be numbered
- =general.toc.number-format= [type: =any string=] (default: ="1.1.1.1.1"=) -- The format used to number the headings
- =general.toc.number-toc= [type: =boolean (true, yes, no, false)=] (default: =no=) -- True if there should be numbers in the table of contents
- =exporters.html.encoding= [type: =any string=] (default: ="utf-8"=) -- The document's encoding
- =exporters.html.wrap= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Shall the output be a full html document ?
- =exporters.html.style= [type: =any string=] (default: ="style.css"=) -- The stylesheet to use
- =exporters.html.use-math2png= [type: =boolean (true, yes, no, false)=] (default: =yes=) -- Convert latex formulas to PNG using Math2png extension
- =exporters.html.image-extensions= [type: =List of any string=] (default: =[".png", ".jpg", ".jpeg", ".gif", ".bmp"]=) -- The list of extensions to be considered as images
- =exporters.latex.classname= [type: =any string=] (default: ="article"=) -- The LaTeX class name to use
- =exporters.latex.header= [type: =any string=] -- The LaTeX header. Default value:

  : "\documentclass{$classname}
  : $packages
  : $extraheader
  : \title{$title}
  : \author{$author}
  : \begin{document}
  : \maketitle
  : "

  Possible variables to use in this item:
  - =classname=: the class name chosen for this document
  - =packages=: the list of packages to be loaded (formatted)
  - =extraheader=: user's extra header (set by extraheader option)
  - =title=: Document's title
  - =author=: Document's author
- =exporters.latex.footer= [type: =any string=] (default: ="\end{document}"=) -- The LaTeX footer
- =exporters.latex.extraheader= [type: =any string=] (default: =""=) -- Extra LaTeX header
- =exporters.latex.sections= [type: =List of any string=] (default: =["section", "subsection", "subsubsection", "paragraph", "subparagraph"]=) -- The name of the sections
- =general.dynamic.ocamlc= [type: =any string=] (default: ="ocamlfind ocamlc -c -package batteries,mlorg"=) -- ocamlc command to use
- =general.dynamic.ocamlopt= [type: =any string=] (default: ="ocamlfind ocamlopt -shared -package batteries,mlorg"=) -- ocamlopt command to use
- =exporters.quote.block= [type: =any string=] (default: ="export"=) -- Name of the codeblock to use to export
- =exporters.quote.external-file= [type: =any string=] (default: =""=) -- Optional name of the file to load
- =exporters.quote.code= [type: =any string=] (default: =""=) -- Optional code (as a string) to load
- =exporters.quote.save= [type: =any string=] (default: =""=) -- Non-empty: set to a ML file in which the generated source will be put (instead of a temporary file
Here is a list of plugins.
*** Exporters
Those plugins are meant to output a document to a specific format. The format of
a configuration name for those module is =exporters.<plugin>.<name>=.
**** Html
The default backend. It exports the file to HTML. It can be used to generate
full pages or only fragment of pages and can be configured to use [[math2png]], the
plugin to deal with converting math formulas to image files. What actually
happens is that every formula the html exporter finds, it uses MathJax to render
it. If the option =use-math2png= is set, then the document is preprocessed by
math2png that replaces formula by images.

Note that targets are translated to anchors, and search links are translated to
links toward anchors. On top of that, an anchor is added to each heading, so
that search links pointing to headings are correctly translated.

**** Latex
Outputs to LaTeX. The output to LaTeX is quite straightforward. Again anchors
are translated to labels. There is to way to translate a search link:

- if it has an empty label, then it is translated to =ref=
- if is has an non-emty label, it is translated to =hyperref=
**** Org
A backend to output to org-mode. Not finished
**** XML
A backend that outputs the abstract tree to XML for further uses by other
programs or to debug =mlorg='s parser.

**** Quote
This backend allows you to run arbitrary OCaml programs on the abstract document. There is two way of using it:
- by running a program in a separate file
- by running a program contained in a block of the document

The first approach is for batch processing of org files whereas the second
allows the document to be defined along with methods to get the desired
information. In any case, the ML source file is compiled in a seperate file
(temporary or not) and dynlinked. See the section [[Retrieving information from
org-mode files]] for more information on how to write such modules.




*** General
Those plugin are general purpose modules inside =mlorg= that offers some
functionnality not related to exporting.

**** Math2png
This modules translates latex formulas to images. It can be configured to only
translate inline or blocks formula (or all of them). It requires a installation
of LaTeX (with the package =preview=) along with the program =dvipng=. It works
by putting all the formula to convert in a TeX, and then compiling it to a dvi
file which contains one formula per pages. =dvipng= is then invoked to convert
each page to an image. Images are renamed so that their filenames is the MD5
hash of the formulas.

=math2png= also handles the depth annotations of dvipng, by annotating images
with a special protocol =depth-<depth>= where =<depth>= is the value returned by
=dvipng=. Thus the alignment of the images (espcially in inline text) is quite
good.
**** Dynamic
Configures the loading of modules that registers values of specific types.
** Retrieving information from org-mode files
The backend [[quote][Quote]] can be used to retrieve raw information from org-mode
files. When using it, you should provide a ML expression that has the type
=Document.t -> unit IO.output -> unit=, in the following context:
: open Mlorg
: open Batteries
: open Printf
: open Block
: open Inline
: module D = Document
: module F = Filter
: let write = Printf.fprintf
You should consult the [[Mlorg's technical documentation][code documentation]] to know how to handle the document. An
exemple, to retrieve the current clocked item along with its total clocking
time:

: fun d out -> match D.current_clocked_item d with 
:                 None -> () 
:               | Some d -> write out "%s (%s)" (D.name d) 
:                             (Timestamp.string_of_seconds (D.clocking_time d))

To use it on a file, just do:

: mlorg.opt --filename $XORGDIR/master.org --backend quote --set exporters.quote.save=/tmp/clock.ml --set exporters.quote.code='fun d out -> match D.current_clocked_item d with None -> () | Some d -> write out "%s (%s)" (D.name d) (Timestamp.string_of_seconds (D.clocking_time d))'
* Syntax recognized by =mlorg=
The syntax of org-mode is not well-defined. =mlorg= does its best to parse the
main constructs. Here is detailed list of the construction available in =mlorg=.

Last update of this section: <2012-08-08 mer.>
** Inline constructions
Inline constructions are found in paragraphs, blocks such as emphasis, links,
and so on.

*** Plain text
Well, nothing to do about it...
*** Emphasis
Emphasis are a way for a piece of text to stand out. =mlorg= handles:
- bold through the syntax =*foo*= (*foo*)
- italic through the syntax =/foo/= (/foo/)
- underline through the syntax =_foo_= (_foo_)
*** Entities
Entity are special characters. See =syntax/inline/entity.ml= for a list of
pre-defined entities. The syntax is TeX's : =\alpha= (\alpha)

*** Export snippet
Export snippet provide a way to insert some markup that will be exported only by
a specific exporter, for instance =@html{some html markup}=.

*** Footnotes references
Footnotes references can be introduced by several ways:
- old way, through a number: =[1]=
- new way, with a name =[fn:name]=
- new way along with a definition =[fn:name:def]=

Note that you can define an anonymous footnote with the syntax =[fn::contents]=.

*** Inline call 
This is a call to a babel definition. The syntax is the following:
=call_name[begin_headers](parameters)[end_headers]=.
*** Inline source
This defines an inline source block. The syntax is the following
=src_language[options]{code}=
*** LaTeX Fragment
This defines an inline math formula using LaTeX syntax. Supported construction:
- =$foo$= 
- =$\command{options}$=
*** Break Line
This tells orgmode to break a line. Syntax: =\\=.

*** Links
Link in =org-mode= are very important and versatile.  The syntax is: =[[label][url]]= where
=url= can be omitted. If so, then the link points to search this pattern. Otherwise the syntax for links is:
- =./foo= or =/foo=: then the link points toward a file
- =protocol:url=

*** Macro parser
Macro are cheap preprocessing on org-mode files. The syntax is ={{macro(param1, param2, ...)}}=.

*** Radio target
Radio targets are anchors. Syntax =<<foo>>=.
*** Verbatim content
Verbatim is unformatted content. Syntax =\=foo\==.

*** Statistics cookie
Holds count of how many items in a list are done. Syntax =[k/n]= or =[k%]=.

*** Timestamp 
A timestamp. It can be either
- a range =t--t'=
- a single timestamp =<year-month-day [hour] [repetition marker]>=
- a scheduled/deadline item: =SCHEDULED: t= and =DEADLINE: t=
- a clock item (=CLOCK: t= or =CLOCK: t--t'=)
- a closed mark (=CLOSED: t=)
** Blocks
Not every block is implemented.

*** Paragraphs
Not much to say..

*** Lists
Unordered lists are started either by '-' or '+'. Ordered list are started by a
number. The syntax of a list item is as follows: 

#+begin_example
- [optional checkbox] [format]
#+end_example
=format= is used only in ordered list and specifies how to print the numbers. It
is a string containing exaclty one number indication of the form
- =1= : the list is numbered with regular numbers
- =i= : the list is numbered with latin numbers
- =I= : the list is numbered with latin numbers (uppercase)
- =a= : the list is numbered with latin letters
- =A= : same but uppercase
- =alpha= : the list is numbered with greek letters
- =Alpha= : same but uppercase

Moreover, the number in a list item is useless. If you want to skip a number,
 use a format. So for instance the following list:
#+begin_example
1. [@(i)] First item
3. [@(iii)] Third item
#+end_example
gives

1. [@(i)] First item
2. [@(iii)] Third item

*** Directive
Directives are a way to tell org about something. Syntax:
#+begin_example
#+DIRECTIVE: VALUE
#+end_example

*** Math
=mlorg= do not handle all math constructions available in =org-mode=. The supported construction is
#+begin_example
$$ foo $$
#+end_example

*** Quote
The syntax is a block named =quote=:

#+begin_example
#+begin_quote
...your quote...
#+end_quote
#+end_example

*** Example
Same thing as for quotes but with =example=.
: #+begin_example
: Code
: #+end_example
Or with alternate syntax:
: : Line 1
: : Line 2
*** A custom block
A custom block, with options. Syntax:
#+begin_example
#+begin_name options
contents
#+end_name
#+end_example
*** Drawers
Drawers are a way to hide stuff. Syntax:
#+begin_example
:DRAWERNAME:
Contents
:END:
#+end_example
*** Property drawers
Special drawers with name =PROPERTIES= which hold a key-value configuration.
#+begin_example
:PROPERTIES:
:key: value
:END:
#+end_example
*** Table
Tables are described according to org-syntax:

#+begin_example
| field1 | ... | fieldn |
| field1 | ... | fieldn |
#+end_example
At the end, one can specify the table's format by

#+begin_example
#+TBLFM: ...
#+end_example

=mlorg= handles the grouping annotations and size annotations of tables as well.
If a line is only composed with empty fields and =<number>= then this line is
not stored as a proper row but information about size of each field. You can
have several line of this kind but they are all discarded but the last one.

Likewise you can define grouping annotations with:
#+begin_example
| / | < | | | | > | < | | > |
#+end_example
(See the manual for more information about this meaning) Again you can have
several of these lines but only the last one will be used. Moreover, if the
first column of your table is only composed by =/= and empty fields, it gets
removed (It seems to be the behavior of =org=).
*** Footnote definition
You can define a footnote in a non-inline by doing so:
#+begin_example
[name] Contents
blabla
#+end_example

Note: Footnotes definition only contains inline text.
*** Keywords
Some keywords can be attached to a block (such as the name) by writing before the block, directive annotations:

: #+name: Name of the block
: #+...
: The block

The list of affiliated keywords (taken from =org-element.el=): =ATTR_ASCII=
=ATTR_DOCBOOK= =ATTR_HTML= =ATTR_LATEX= =ATTR_ODT= =CAPTION= =DATA= =HEADER=
=HEADERS= =LABEL= =NAME= =PLOT= =RESNAME= =RESULT= =RESULTS= =SOURCE=
=SRCNAME= and =TBLNAME=.



* Mlorg's technical documentation
The documentation of the code of mlorg can be found [[http:doc][here]]. It contains the
documentation generated by =ocamldoc= on the sources.
